module.exports = function (grunt) {
    'use strict';

    var rdefineEnd = /\}\);[^}\w]*$/,
    // This is temporary until the skipSemiColonInsertion option makes it to NPM
        requirejs = require('../r'),
        config = {
            baseUrl: 'src',
            name: 'mdsol',
            out: 'dist/mdsol.js',
            // We have multiple minify steps
            optimize: 'none',
            skipSemiColonInsertiodn: true,
            wrap: {
                startFile: 'src/intro.js',
                endFile: 'src/outro.js'
            },
            onBuildWrite: convert
        };

    // Strip all definitions generated by requirejs
    // Convert "var" modules to var declarations. "var module" means the module only contains a
    // return statement that should be converted to a var declaration. This is indicated by 
    // including the file in any "var" folder
    function convert(name, path, contents) {
        // Convert var modules
        if (/.\/var\//.test(path)) {
            contents = contents
                .replace(/define\([\w\W]*?return/, 'var ' + (/var\/([\w-]+)/.exec(name)[1]) + ' =')
                .replace(rdefineEnd, '');
        } else {
            // Ignore mdsol's return statement (the only necessary one)
            if (name !== 'mdsol') {
                contents = contents
                    .replace(/\s*return\s+[^\}]+(\}\);[^\w\}]*)$/, '$1');
            } 
            
            // Remove define wrappers, closure ends, and empty declarations
            contents = contents
                .replace(/define\([^{]*?{/, '')
                .replace(rdefineEnd, '');

            // Remove empty definitions
            contents = contents
                .replace(/define\(\[[^\]]+\]\)[\W\n]+$/, '');
        }
        return contents;
    }

    grunt.registerMultiTask('build', 'Concatenate source, remove sub AMD definitions, embed date/version',
        function () {
            var flag,
                done = this.async(),
                flags = this.flags,
                name = this.data.dest,
                included = [],
                version = grunt.config('pkg.version');
            grunt.log.writeln(typeof flags);
            grunt.log.writeln(flags);
            grunt.log.writeln(name);
            // figure out which files to exclude based on these rules in this order:
            //  dependency explicit exclude
            //  > explicit exclude
            //  > explicit include
            //  > dependency implicit exclude
            //  > implicit exclude
            // examples:
            //  *                  none (implicit exclude)
            //  *:*                all (implicit include)
            for (flag in flags) {
                grunt.log.writeln(flag);
                if (flag !== '*') {
                    var m = /^(\+|\-|)([\w\/-]+)$/.exec(flag);
                    grunt.log.writeln(flag);
                    included.push(m[2]);
                }
            }

            grunt.verbose.writeflags(included, 'Included');

            config.include = included;

            config.out = function (compiled) {
                // Embed version and date
                compiled = compiled
                    .replace(/@VERSION/g, version)
                    .replace(/@DATE/g, (new Date()).toISOString().replace(/:\d+\.\d+Z$/, 'Z'));

                // Write concatenated source to file
                grunt.file.write(name, compiled);
            };

            // Trace dependencies and concatenate files
            requirejs.optimize(config, function (response) {
                grunt.verbose.writeln(response);
                grunt.log.ok('File "' + name + '" created.');
                done();
            }, function (err) {
                done(err);
            });
        });
};